name: UI Branch Build Check

on:
  push:
    branches:
      - UI

env:
  CARGO_TERM_COLOR: always

jobs:
  build-check:
    name: Build Check
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            build_target: x86_64-unknown-linux-musl
          - os: windows-latest
            build_target: x86_64-pc-windows-msvc
          - os: macos-latest
            build_target: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      
      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - uses: dtolnay/rust-toolchain@stable
      
      - name: Install rust targets
        run: rustup target add ${{ matrix.build_target }}
        
      - name: Build Linux MUSL
        if: matrix.os == 'ubuntu-latest'
        uses: gmiam/rust-musl-action@master
        with:
          args: |
            sed -i 's/deb.debian.org/archive.debian.org/g' /etc/apt/sources.list
            sed -i 's/security.debian.org/archive.debian.org/g' /etc/apt/sources.list
            sed -i '/updates/d' /etc/apt/sources.list
            apt-get update && apt-get install -y pkg-config libglib2.0-dev libatk1.0-dev libpango1.0-dev libgdk-pixbuf2.0-dev libgtk-3-dev gcc g++ musl-dev
            export PKG_CONFIG_ALLOW_CROSS=1
            export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
            export PKG_CONFIG_SYSROOT_DIR=/
            cargo build --target ${{ matrix.build_target }}
          
      - name: Build MacOS
        if: matrix.os == 'macos-latest'
        run: cargo build --target ${{ matrix.build_target }}
          
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: cargo build --target ${{ matrix.build_target }}