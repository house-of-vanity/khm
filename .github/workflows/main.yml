name: Rust static build and publish

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: khm

jobs:
  build:
    name: Build static binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            build_target: x86_64-unknown-linux-musl
            platform_name: linux-amd64
          - os: windows-latest
            build_target: x86_64-pc-windows-msvc
            platform_name: windows-amd64
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      
      - uses: dtolnay/rust-toolchain@stable
      
      - uses: mbrobbel/rustfmt-check@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install rust targets
        run: rustup target add ${{ matrix.build_target }}
        
      - name: Build Linux MUSL
        if: matrix.os == 'ubuntu-latest'
        uses: gmiam/rust-musl-action@master
        with:
          args: cargo build --target $BUILD_TARGET --release
          
      - name: Build Windows
        if: matrix.os != 'ubuntu-latest'
        run: cargo build --target ${{ matrix.build_target }} --release
          
      - uses: actions/upload-artifact@v4
        name: Upload artifact
        with:
          name: ${{ env.BINARY_NAME }}_${{ matrix.platform_name }}
          path: target/${{ matrix.build_target }}/release/${{ env.BINARY_NAME }}*

  release:
    name: Making New Release ^_^
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Extract branch and tag name
        run: |
          echo "REF_TYPE=$(echo ${GITHUB_REF} | cut -d'/' -f2)" >> $GITHUB_ENV
          echo "REF_NAME=$(echo ${GITHUB_REF} | cut -d'/' -f3)" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        name: Download Linux binary
        id: download_linux_binary
        with:
          name: ${{ env.BINARY_NAME }}_linux-amd64
          path: ${{ env.BINARY_NAME }}_linux-amd64
      - uses: actions/download-artifact@v4
        name: Download Windows artifact
        id: download_windows_binary
        with:
          name: ${{ env.BINARY_NAME }}_windows-amd64
          path: ${{ env.BINARY_NAME }}_windows-amd64
      - name: LS
        run: |
          ls -lah
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.BINARY_NAME }}_linux-amd64
          asset_name: ${{ env.BINARY_NAME }}_linux-amd64
          asset_content_type: application/octet-stream
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.BINARY_NAME }}_windows-amd64
          asset_name: ${{ env.BINARY_NAME }}_windows-amd64
          asset_content_type: application/octet-stream
