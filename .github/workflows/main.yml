name: Rust static build and publish

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: khm

jobs:
  build:
    name: Build static binary
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: ubuntu-latest
          #   build_target: x86_64-unknown-linux-musl
          #   platform_name: linux-amd64-musl
          #   build_type: musl
          - os: ubuntu-latest
            build_target: x86_64-unknown-linux-gnu
            platform_name: linux-amd64
            build_type: dynamic
          - os: windows-latest
            build_target: x86_64-pc-windows-msvc
            platform_name: windows-amd64
            build_type: default
          - os: macos-latest
            build_target: aarch64-apple-darwin
            platform_name: macos-arm64
            build_type: default
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      
      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - uses: dtolnay/rust-toolchain@stable
      
      - name: Install rust targets
        run: rustup target add ${{ matrix.build_target }}
        
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'dynamic'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config libgtk-3-dev libglib2.0-dev libcairo2-dev libpango1.0-dev libatk1.0-dev libgdk-pixbuf2.0-dev libxdo-dev
          
      - name: Build Linux Dynamic
        if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'dynamic'
        run: cargo build --target ${{ matrix.build_target }} --release
        
      # - name: Build Linux MUSL (no GUI)
      #   if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'musl'
      #   uses: gmiam/rust-musl-action@master
      #   with:
      #     args: |
      #       sed -i 's/deb.debian.org/archive.debian.org/g' /etc/apt/sources.list
      #       sed -i 's/security.debian.org/archive.debian.org/g' /etc/apt/sources.list
      #       sed -i '/buster-updates/d' /etc/apt/sources.list
      #       apt-get update && apt-get install -y pkg-config
      #       cargo build --target ${{ matrix.build_target }} --release --no-default-features --features server
          
      - name: Build MacOS
        if: matrix.os == 'macos-latest'
        run: cargo build --target ${{ matrix.build_target }} --release
          
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: cargo build --target ${{ matrix.build_target }} --release
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}_${{ matrix.platform_name }}
          path: target/${{ matrix.build_target }}/release/${{ env.BINARY_NAME }}*

  release:
    name: Create Release and Upload Assets
    if: always()  # Always run even if some builds fail
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets/
          # Copy files with proper naming from each artifact directory
          for artifact_dir in artifacts/*/; do
            if [[ -d "$artifact_dir" ]]; then
              platform=$(basename "$artifact_dir" | sed 's|khm_||')
              echo "Processing platform: $platform"
              
              # Find binary files in the artifact directory
              find "$artifact_dir" -name "${{ env.BINARY_NAME }}*" -type f | while read -r file; do
                filename=$(basename "$file")
                if [[ "$filename" == *".exe" ]]; then
                  cp "$file" "release-assets/${{ env.BINARY_NAME }}_${platform}.exe"
                  echo "Copied: $file -> release-assets/${{ env.BINARY_NAME }}_${platform}.exe"
                else
                  cp "$file" "release-assets/${{ env.BINARY_NAME }}_${platform}"
                  echo "Copied: $file -> release-assets/${{ env.BINARY_NAME }}_${platform}"
                fi
              done
            fi
          done
          
          echo "Final release assets:"
          ls -la release-assets/
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          files: release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false

  build_docker:
    name: Build and Publish Docker Image
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        name: Download Linux artifact
        with:
          name: ${{ env.BINARY_NAME }}_linux-amd64
          path: .
          
      - name: List downloaded files
        run: |
          ls -lah
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ultradesu
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Set exec flag
        run: |
          chmod +x ${{ env.BINARY_NAME }}
          
      - name: Set outputs
        id: get_tag
        run: |
          echo "tag=$(echo ${GITHUB_REF} | cut -d'/' -f3)" >> $GITHUB_OUTPUT
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ultradesu/${{ env.BINARY_NAME }}:latest,ultradesu/${{ env.BINARY_NAME }}:${{ steps.get_tag.outputs.tag }}

