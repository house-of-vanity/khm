name: Rust static build and publish

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: khm

jobs:
  build:
    name: Build static binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            build_target: x86_64-unknown-linux-musl
          - os: windows-latest
            build_target: x86_64-pc-windows-msvc
          - os: macos-latest
            build_target: x86_64-apple-darwin
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      
      - uses: dtolnay/rust-toolchain@stable
      
      - uses: mbrobbel/rustfmt-check@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install rust targets
        run: rustup target add ${{ matrix.build_target }}
        
      - name: Build linux MUSL
        if: matrix.os == 'ubuntu-latest'
        uses: gmiam/rust-musl-action@master
        with:
          args: cargo build --target $BUILD_TARGET --release
          
      - name: Build MacOS and Windows
        if: matrix.os != 'ubuntu-latest'
        run: cargo build --target ${{ matrix.build_target }} --release
        
      - name: Extract branch or tag name
        id: extract_ref
        run: |
          echo "{ref_type}={${REF_TYPE}}" >> $GITHUB_STATE
          echo "{ref_name}={${REF_NAME}}" >> $GITHUB_STATE
          
      - uses: actions/upload-artifact@v3
        name: Upload artifact
        with:
          name: ${{ env.BINARY_NAME }}_${{ steps.extract_ref.outputs.ref_name }}_${{ matrix.build_target }}
          path: target/${{ matrix.build_target }}/release/${{ env.BINARY_NAME }}*

  release:
    name: Making New Release ^_^
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Extract branch or tag name
        id: extract_ref
        run: |
          REF_TYPE=$(echo "${GITHUB_REF}" | cut -d'/' -f2)
          REF_NAME=$(echo "${GITHUB_REF}" | cut -d'/' -f3)
          echo "::set-output name=ref_type::${REF_TYPE}"
          echo "::set-output name=ref_name::${REF_NAME}"
      - uses: actions/download-artifact@v3
        name: Download Linux artifact
        with:
          name: ${{ env.BINARY_NAME }}_${{ steps.extract_ref.outputs.ref_name }}_x86_64-unknown-linux-musl
          path: artifacts/linux/
      - uses: actions/download-artifact@v3
        name: Download Windows artifact
        with:
          name: ${{ env.BINARY_NAME }}_${{ steps.extract_ref.outputs.ref_name }}_x86_64-pc-windows-msvc
          path: artifacts/windows/
      - uses: actions/download-artifact@v3
        name: Download macOS artifact
        with:
          name: ${{ env.BINARY_NAME }}_${{ steps.extract_ref.outputs.ref_name }}_x86_64-apple-darwin
          path: artifacts/macos/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}-linux
          asset_content_type: application/octet-stream
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows/${{ env.BINARY_NAME }}.exe
          asset_name: ${{ env.BINARY_NAME }}-windows.exe
          asset_content_type: application/octet-stream
      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/macos/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}-macos
          asset_content_type: application/octet-stream
